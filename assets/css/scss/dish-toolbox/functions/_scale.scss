/// Scale a value relative to the viewport width using `calc()` and viewport units
/// @group Main
/// @param {Number} $start - Starting value
/// @param {Number} $end - Ending value
/// @param {Number} $min-width - Starting viewport width
/// @param {Number} $max-width - Ending viewport width
/// @return {String} - Custom `calc()` formula
/// @ignore Demo https://www.sassmeister.com/gist/9f87f8c19e91c811831d84fc8484ed24
/// @link http://www.sassmeister.com/gist/7f22e44ace49b5124eec
/// @link http://madebymike.com.au/writing/precise-control-responsive-typography/
/// @link https://zellwk.com/blog/viewport-based-typography/
/// @link http://codepen.io/indrekpaas/pen/VarLaJ?editors=1100
/// @link http://codepen.io/maranomynet/pen/ozNpXV?editors=1100
/// @link https://www.smashingmagazine.com/2016/05/fluid-typography/
/// @example scss
///   p {
///     font-size: fs-scale(20px, 30px, 320px, 400px);
///   }
@function fs-scale($start, $end, $min-width, $max-width, $units: 'rem') {
  @if $start > 0 and $end > 0 and unit($start) != unit($end) {
    @error 'ðŸ”´  fs-scale() units donâ€™t match';
  }

  $slope: math.div($end - $start, $max-width - $min-width);

  $intercept: $end - ($slope * $max-width);

  @if (fs-strip-unit($intercept) == 0) {
    @return $slope * 100vw;
  }
  @else {
    @if $units == 'em' {
      @if $slope == 0 {
        @return fs-em($intercept);
      }
      @else {
        @return calc(#{$slope * 100vw} + #{fs-em($intercept)});
      }
    }
    @else {
      @if $slope == 0 {
        @return fs-em($intercept);
      }
      @else {
        @return calc(#{$slope * 100vw} + #{fs-rem($intercept)});
      }
    }
  }
}
